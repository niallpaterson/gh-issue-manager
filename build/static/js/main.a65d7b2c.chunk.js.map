{"version":3,"sources":["container/IssuePanel/IssuePanel.module.scss","component/Issue/Issue.module.scss","component/Issue/index.js","component/Issue/Issue.jsx","container/IssuePanel/index.js","container/IssuePanel/IssuePanel.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Issue","title","className","styles","issue","IssuePanel","issues","this","props","issuePanel","map","index","key","Component","App","state","fetchGithubData","requestOptions","fetch","then","response","json","result","setState","catch","error","console","log","myHeaders","Headers","append","method","headers","redirect","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"4HACAA,EAAOC,QAAU,CAAC,WAAa,iC,gBCA/BD,EAAOC,QAAU,CAAC,MAAQ,uB,6NCCXC,ECCD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACf,OACE,oCACE,6BAASC,UAAWC,IAAOC,OACzB,4BAAKH,MCLEI,E,uKCKX,IAAMC,EAASC,KAAKC,MAAMF,OAC5B,OACE,oCACE,6BAASJ,UAAWC,IAAOM,YACxBH,EAAOI,KAAI,SAACN,EAAOO,GAAR,OAAkB,kBAAC,EAAD,CAAOV,MAAOG,EAAMH,MAAOW,IAAKD,a,GAP7CE,aCoCVC,E,4MAlCbC,MAAQ,CACNT,OAAQ,I,EAGVU,gBAAkB,SAACC,GACjBC,MAAM,gCAAiCD,GACpCE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAI,EAAKC,SAAS,CAACjB,OAAQgB,OACtCE,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,QAASF,O,kEAIvC,IAAMG,EAAY,IAAIC,QACtBD,EAAUE,OAAO,gBAAiB,mDAClC,IAAMb,EAAiB,CACrBc,OAAQ,MACRC,QAASJ,EACTK,SAAU,UAEZ1B,KAAKS,gBAAgBC,K,+BAIvB,OACC,oCACC,kBAAC,EAAD,CAAYX,OAAQC,KAAKQ,MAAMT,c,GA3BjBO,aCQEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdxB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMwB,c","file":"static/js/main.a65d7b2c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"issuePanel\":\"IssuePanel_issuePanel__3udtA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"issue\":\"Issue_issue__35Wck\"};","import Issue from \"./Issue\";\n\nexport default Issue;\n","import React from \"react\";\nimport styles from \"./Issue.module.scss\";\n\nconst Issue = ({ title }) => {\n  return (\n    <>\n      <article className={styles.issue}>\n        <h3>{title}</h3>\n      </article>\n    </>\n  );\n};\n\nexport default Issue;\n","import IssuePanel from \"./IssuePanel\";\n\nexport default IssuePanel;\n","import React, { Component } from 'react';\nimport styles from \"./IssuePanel.module.scss\";\nimport Issue from '../../component/Issue';\n\nclass IssuePanel extends Component {\n\n  render() {\n    const issues = this.props.issues;\n  return (\n    <>\n      <section className={styles.issuePanel}>\n        {issues.map((issue, index) => <Issue title={issue.title} key={index}/>)}\n      </section>\n    </>\n  );\n  };\n};\n\nexport default IssuePanel;\n","import React, { Component } from 'react';\nimport './App.module.scss';\nimport IssuePanel from \"./container/IssuePanel\"\n\nclass App extends Component {\n\n  state = {\n    issues: []\n  }\n\n  fetchGithubData = (requestOptions) => {\n    fetch('https://api.github.com/issues', requestOptions)\n      .then(response => response.json())\n      .then(result => this.setState({issues: result}))\n      .catch(error => console.log('error', error));\n  };\n\n  componentDidMount() {\n    const myHeaders = new Headers();\n    myHeaders.append(\"Authorization\", \"Bearer 0669900481e7e7675d741cdb0f7f838daf40486c\");\n    const requestOptions = {\n      method: 'GET',\n      headers: myHeaders,\n      redirect: 'follow'\n    };\n    this.fetchGithubData(requestOptions);\n  };\n\n  render()  {\n  return (\n   <>\n    <IssuePanel issues={this.state.issues}/>\n   </>\n  );\n  }\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}